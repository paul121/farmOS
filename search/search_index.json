{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"farmOS 2.x ATTENTION: This documentation is for the UNSTABLE 2.x branch of farmOS, which is under active development. If you want to use farmOS, the recommended stable branch is 7.x-1.x. Current documentation for 7.x-1.x is available at http://farmOS.org .","title":"farmOS"},{"location":"#farmos-2x","text":"ATTENTION: This documentation is for the UNSTABLE 2.x branch of farmOS, which is under active development. If you want to use farmOS, the recommended stable branch is 7.x-1.x. Current documentation for 7.x-1.x is available at http://farmOS.org .","title":"farmOS 2.x"},{"location":"development/","text":"Getting started Follow these instructions to set up a local farmOS development environment. The only requirements are Docker and Docker Compose . 1. Set up Docker containers Run the following commands to create a farmOS directory and set up Docker containers for farmOS and PostgreSQL: mkdir farmOS && cd farmOS curl https://raw.githubusercontent.com/farmOS/farmOS/2.x/docker/docker-compose.development.yml -o docker-compose.yml sudo docker-compose up -d 2. Install farmOS Open http://localhost in a browser and install farmOS with the following database credentials: Database type: PostgreSQL Database name: farm Database user: farm Database password: farm Advanced options > Host: db 3. Develop Open the www directory in your favorite IDE.","title":"Getting started"},{"location":"development/#getting-started","text":"Follow these instructions to set up a local farmOS development environment. The only requirements are Docker and Docker Compose .","title":"Getting started"},{"location":"development/#1-set-up-docker-containers","text":"Run the following commands to create a farmOS directory and set up Docker containers for farmOS and PostgreSQL: mkdir farmOS && cd farmOS curl https://raw.githubusercontent.com/farmOS/farmOS/2.x/docker/docker-compose.development.yml -o docker-compose.yml sudo docker-compose up -d","title":"1. Set up Docker containers"},{"location":"development/#2-install-farmos","text":"Open http://localhost in a browser and install farmOS with the following database credentials: Database type: PostgreSQL Database name: farm Database user: farm Database password: farm Advanced options > Host: db","title":"2. Install farmOS"},{"location":"development/#3-develop","text":"Open the www directory in your favorite IDE.","title":"3. Develop"},{"location":"development/code/","text":"Coding standards farmOS follows Drupal coding standards . The farmOS development Docker image comes pre-installed with PHP CodeSniffer for detecting code standard violations. The following command will run PHP CodeSniffer on all farmOS code: sudo docker exec -it -u www-data farmos_www_1 phpcs /opt/drupal/web/profiles/farm If you see no output, then there are no issues. In some cases, code standard violations can be fixed automatically with phpcbf : sudo docker exec -it -u www-data farmos_www_1 phpcbf /opt/drupal/web/profiles/farm","title":"Coding standards"},{"location":"development/code/#coding-standards","text":"farmOS follows Drupal coding standards . The farmOS development Docker image comes pre-installed with PHP CodeSniffer for detecting code standard violations. The following command will run PHP CodeSniffer on all farmOS code: sudo docker exec -it -u www-data farmos_www_1 phpcs /opt/drupal/web/profiles/farm If you see no output, then there are no issues. In some cases, code standard violations can be fixed automatically with phpcbf : sudo docker exec -it -u www-data farmos_www_1 phpcbf /opt/drupal/web/profiles/farm","title":"Coding standards"},{"location":"development/composer/","text":"Composer The farmOS development Docker image comes pre-installed with Composer , which is used for dependency management. Running Composer in Docker In order to run the composer command, you must use docker exec to run the command inside the farmOS container. sudo docker exec -it -u www-data farmos_www_1 composer For example, the following will run the composer help command: sudo docker exec -it -u www-data farmos_www_1 composer help Common tasks Some common Composer tasks are documented here. Updating dependencies composer update [package-name] Warning : If composer update farmos/farmos is run, it will replace the Git repository in web/profiles/farm , discarding all changes/branches/remotes/etc. Adding a module composer require drupal/[module] This will download the module into the web/modules/contrib directory, and add it to the root composer.json file. If the module is being added to the farmOS installation profile itself, you need to manually move the require line from the root composer.json to web/profiles/farm/composer.json and commit it to that repository. To install the module, use Drush . Notes Could not delete /var/www/html/web/sites/default/default.settings.php See https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates#s-troubleshooting-permission-issues-prevent-running-composer","title":"Composer"},{"location":"development/composer/#composer","text":"The farmOS development Docker image comes pre-installed with Composer , which is used for dependency management.","title":"Composer"},{"location":"development/composer/#running-composer-in-docker","text":"In order to run the composer command, you must use docker exec to run the command inside the farmOS container. sudo docker exec -it -u www-data farmos_www_1 composer For example, the following will run the composer help command: sudo docker exec -it -u www-data farmos_www_1 composer help","title":"Running Composer in Docker"},{"location":"development/composer/#common-tasks","text":"Some common Composer tasks are documented here.","title":"Common tasks"},{"location":"development/composer/#updating-dependencies","text":"composer update [package-name] Warning : If composer update farmos/farmos is run, it will replace the Git repository in web/profiles/farm , discarding all changes/branches/remotes/etc.","title":"Updating dependencies"},{"location":"development/composer/#adding-a-module","text":"composer require drupal/[module] This will download the module into the web/modules/contrib directory, and add it to the root composer.json file. If the module is being added to the farmOS installation profile itself, you need to manually move the require line from the root composer.json to web/profiles/farm/composer.json and commit it to that repository. To install the module, use Drush .","title":"Adding a module"},{"location":"development/composer/#notes","text":"Could not delete /var/www/html/web/sites/default/default.settings.php See https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates#s-troubleshooting-permission-issues-prevent-running-composer","title":"Notes"},{"location":"development/debug/","text":"Debugging The farmOS development Docker image comes pre-installed with XDebug . In order to connect to it, the XDEBUG_CONFIG environment variable must be used to configure XDebug's remote_host setting with the Docker container's \"Gateway\" IP address. With the containers running, this command will print the gateway IP: sudo docker inspect farmos_www_1 | grep -o '\"Gateway\": \".*\\..*\\..*\\..*\"' Edit docker-compose.yml and enter the gateway IP in the XDEBUG_CONFIG environment variable. For example: environment: XDEBUG_CONFIG: remote_host=192.168.128.1 Restart the Docker containers for this change to take affect. sudo docker-compose restart Note : If the Docker containers are removed and recreated, the IP address may change, and you will need to repeat these steps to reconfigure it.","title":"Debugging"},{"location":"development/debug/#debugging","text":"The farmOS development Docker image comes pre-installed with XDebug . In order to connect to it, the XDEBUG_CONFIG environment variable must be used to configure XDebug's remote_host setting with the Docker container's \"Gateway\" IP address. With the containers running, this command will print the gateway IP: sudo docker inspect farmos_www_1 | grep -o '\"Gateway\": \".*\\..*\\..*\\..*\"' Edit docker-compose.yml and enter the gateway IP in the XDEBUG_CONFIG environment variable. For example: environment: XDEBUG_CONFIG: remote_host=192.168.128.1 Restart the Docker containers for this change to take affect. sudo docker-compose restart Note : If the Docker containers are removed and recreated, the IP address may change, and you will need to repeat these steps to reconfigure it.","title":"Debugging"},{"location":"development/drush/","text":"Drush The farmOS Docker image comes pre-installed with Drush , which provides shell commands for working with a Drupal installation. Running Drush in Docker In order to run the drush command, you must use docker exec to run the command inside the farmOS container. sudo docker exec -it -u www-data farmos_www_1 drush For example, the following will run the drush cr command to rebuild caches: sudo docker exec -it -u www-data farmos_www_1 drush cr Useful commands Some useful Drush commands are documented here. Rebuild caches drush cr Install a module drush en log","title":"Drush"},{"location":"development/drush/#drush","text":"The farmOS Docker image comes pre-installed with Drush , which provides shell commands for working with a Drupal installation.","title":"Drush"},{"location":"development/drush/#running-drush-in-docker","text":"In order to run the drush command, you must use docker exec to run the command inside the farmOS container. sudo docker exec -it -u www-data farmos_www_1 drush For example, the following will run the drush cr command to rebuild caches: sudo docker exec -it -u www-data farmos_www_1 drush cr","title":"Running Drush in Docker"},{"location":"development/drush/#useful-commands","text":"Some useful Drush commands are documented here.","title":"Useful commands"},{"location":"development/drush/#rebuild-caches","text":"drush cr","title":"Rebuild caches"},{"location":"development/drush/#install-a-module","text":"drush en log","title":"Install a module"},{"location":"development/notes/","text":"Development notes Docker build arguments The farmOS dev Docker image allows certain variables to be overridden at image build time using the --build-arg parameter of docker build . Available arguments and their default values are described below: FARMOS_REPO - The farmOS Git repository URL. Default: https://github.com/farmOS/farmOS.git FARMOS_VERSION - The farmOS Git branch/tag/commit to check out. Default: 2.x PROJECT_REPO - The farmOS Composer project Git repository URL. Default: https://github.com/farmOS/composer-project.git PROJECT_VERSION - The farmOS Composer project Git branch/tag/commit to check out. Default: 2.x WWW_DATA_ID - The ID to use for the www-data user and group inside the image. Setting this to the ID of the developer's user on the host machine allows Composer to create files owned by www-data inside the container, while keeping those files editable by the developer outside of the container. If your user ID is not 1000 , build the image with: --build-arg WWW_DATA_ID=$(id -u) Default: 1000","title":"Notes"},{"location":"development/notes/#development-notes","text":"","title":"Development notes"},{"location":"development/notes/#docker-build-arguments","text":"The farmOS dev Docker image allows certain variables to be overridden at image build time using the --build-arg parameter of docker build . Available arguments and their default values are described below: FARMOS_REPO - The farmOS Git repository URL. Default: https://github.com/farmOS/farmOS.git FARMOS_VERSION - The farmOS Git branch/tag/commit to check out. Default: 2.x PROJECT_REPO - The farmOS Composer project Git repository URL. Default: https://github.com/farmOS/composer-project.git PROJECT_VERSION - The farmOS Composer project Git branch/tag/commit to check out. Default: 2.x WWW_DATA_ID - The ID to use for the www-data user and group inside the image. Setting this to the ID of the developer's user on the host machine allows Composer to create files owned by www-data inside the container, while keeping those files editable by the developer outside of the container. If your user ID is not 1000 , build the image with: --build-arg WWW_DATA_ID=$(id -u) Default: 1000","title":"Docker build arguments"},{"location":"development/tests/","text":"Automated tests The farmOS development Docker image comes pre-installed with all the dependencies necessary for running automated tests via PHPUnit . The following command will run all automated tests provided by farmOS: sudo docker exec -it -u www-data farmos_www_1 phpunit --verbose --debug --group farm Tests from other projects/dependencies can be run in a similar fashion. For example, the following command will run all tests in the Log module: sudo docker exec -it -u www-data farmos_www_1 phpunit --verbose --debug --group Log","title":"Automated tests"},{"location":"development/tests/#automated-tests","text":"The farmOS development Docker image comes pre-installed with all the dependencies necessary for running automated tests via PHPUnit . The following command will run all automated tests provided by farmOS: sudo docker exec -it -u www-data farmos_www_1 phpunit --verbose --debug --group farm Tests from other projects/dependencies can be run in a similar fashion. For example, the following command will run all tests in the Log module: sudo docker exec -it -u www-data farmos_www_1 phpunit --verbose --debug --group Log","title":"Automated tests"}]}