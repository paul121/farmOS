<?php

/**
 * @file
 * The farmOS UI Theme module.
 */

use Drupal\Core\Block\BlockPluginInterface;

/**
 * Implements hook_gin_content_form_routes().
 */
function farm_ui_theme_gin_content_form_routes() {
  return [
    'entity.asset.add_form',
    'entity.asset.edit_form'
  ];
}

/**
 * Implements hook_theme().
 */
function farm_ui_theme_theme() {
//  return [
//    'page__asset' => [
//      'template' => 'page--asset',
//      'base hook' => 'page',
//    ],
//  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_ui_theme_preprocess_html(&$variables) {

  // Edit form? Use the new Gin Edit form layout.
//  if (_farm_ui_theme_is_content_form()) {
//    $variables['attributes']['class'][] = 'gin--edit-form';
//  }
}

/**
 * Check if were on a content edit form.
 */
function _farm_ui_theme_is_content_form($form = NULL, $form_state = NULL, $form_id = NULL) {
  $is_content_form = FALSE;

  // Get route name.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Routes to include.
  $route_names = [
    'entity.asset.add_form',
    'entity.asset.edit_form',
  ];
  return in_array($route_name, $route_names);
}

/**
 * Implements form_alter_HOOK() for some major form changes.
 */
function farm_ui_theme_form_alter(&$form, $form_state, $form_id) {
  // Are we on an edit form?
  if (_farm_ui_theme_is_content_form($form, $form_state, $form_id)) {

//    $form['meta']['code'] = [
//      '#type' => 'item',
//      '#markup' => t('Product code'),
//      '#access' => !$entity->isNew(),
//      '#wrapper_attributes' => ['class' => ['entity-meta__title']],
//    ];
//    $form['meta']['changed'] = [
//      '#type' => 'item',
//      '#title' => t('Last saved'),
//      '#markup' => ( !$entity->isNew() ? ( $this->dateFormatter->format($entity->getChangedTime(), 'short') . ( $entity->getRevisionLogMessage() ? '&nbsp;-&nbsp;<small><em>' . $entity->getRevisionLogMessage() . '</em></small>' : '' ) ) : $this->t('Not saved yet') ),
//      '#wrapper_attributes' => ['class' => ['entity-meta__last-saved']],
//    ];
//    $form['meta']['author'] = [
//      '#type' => 'item',
//      '#title' => $this->t('Author'),
//      '#markup' => $entity->getOwner()->getAccountName(),
//      '#wrapper_attributes' => ['class' => ['entity-meta__author']],
//    ];
//    $form['meta']['language'] = [
//      '#type' => 'item',
//      '#title' => $this->t('Language'),
//      '#markup' => $this->t($entity->language()->getName()),
//      '#wrapper_attributes' => ['class' => ['entity-meta__language']],
//    ];

//    $form['advanced']['#attributes']['class'][] = 'entity-meta';
//
//    $form['meta'] = [
//      '#type' => 'details',
//      '#group' => 'advanced',
//      '#weight' => -10,
//      '#title' => t('Status'),
//      '#attributes' => ['class' => ['entity-meta__header']],
//      '#tree' => TRUE,
//      //'#access' => $this->currentUser->hasPermission('administer nodes'),
//    ];
//
//    // Action buttons.
//    if (isset($form['actions'])) {
//      if (isset($form['actions']['preview'])) {
//        // Put Save after Preview.
//        $save_weight                          = $form['actions']['preview']['#weight'] ? $form['actions']['preview']['#weight'] + 1 : 11;
//        $form['actions']['submit']['#weight'] = $save_weight;
//      }
//
//      // Create gin_actions group.
//      $form['gin_actions'] = [
//        '#type'         => 'container',
//        '#weight'       => -1,
//        '#multilingual' => TRUE,
//        '#attributes'   => [
//          'class' => [
//            'gin-sticky',
//          ],
//        ],
//      ];
//      // Assign status to gin_actions.
//      $form['status']['#group'] = 'gin_actions';
//
//      // Create actions group.
//      $form['gin_actions']['actions'] = [
//        '#type'   => 'actions',
//        '#weight' => 130,
//      ];
//
//      // Add Submit to gin_actions actions.
//      $form['gin_actions']['actions']['submit'] = ($form['actions']['submit']) ?? [];
//
//      // Create gin_sidebar group.
//      $form['gin_sidebar'] = [
//        '#group'        => 'meta',
//        '#type'         => 'container',
//        '#weight'       => 99,
//        '#multilingual' => TRUE,
//        '#attributes'   => [
//          'class' => [
//            'gin-sidebar',
//          ],
//        ],
//      ];
//
//      // Copy footer over.
//      $form['gin_sidebar']['footer'] = ($form['footer']) ?? [];
//      // Copy actions over.
//      $form['gin_sidebar']['actions'] = ($form['actions']) ?? [];
//      // Unset previous added preview & submit.
//      unset($form['gin_sidebar']['actions']['preview']);
//      unset($form['gin_sidebar']['actions']['submit']);
//    }
//
//    // Attach library.
//    $form['#attached']['library'][] = 'gin/gin_editform';
//
//    // Node options for administrators.
//    $form['options'] = [
//      '#type' => 'details',
//      '#title' => t('Promotion options'),
//      '#group' => 'advanced',
//      '#attributes' => [
//        'class' => ['node-form-options'],
//      ],
////      '#attached' => [
////        'library' => ['node/drupal.node'],
////      ],
//      '#weight' => 95,
//      '#optional' => TRUE,
//    ];
    $form['flag']['#group'] = 'meta';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function farm_ui_theme_element_info_alter(array &$info) {
  if (isset($info['farm_map'])) {
    $info['farm_map']['#attached']['library'][] = 'farm_ui_theme/map';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_ui_theme_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'help_block') {
    $variables['#attached']['library'][] = 'farm_ui_theme/help';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_ui_theme_preprocess_farm_map(&$variables) {

  // We need to add the flag CSS to pages with maps in them because a user MAY
  // click a popup which MAY have flags in it. Otherwise the flags do not get
  // styled.
  $variables['#attached']['library'] = 'farm_ui_theme/flag';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_ui_theme_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'farm_ui_theme/toolbar';
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function farm_ui_theme_block_view_farm_powered_by_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#attached']['library'][] = 'farm_ui_theme/footer';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_ui_theme_preprocess_field__flag(array &$variables) {
  $variables['#attached']['library'][] = 'farm_ui_theme/flag';
}
