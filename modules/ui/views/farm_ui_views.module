<?php

/**
 * @file
 * The farmOS UI Views module.
 */

use Drupal\views\ViewExecutable;

/**
 * Implements hook_farm_dashboard_panes().
 */
function farm_ui_views_farm_dashboard_panes() {
  $panes = [];

  // If the plan module is enabled, add active plans pane.
  if (\Drupal::service('module_handler')->moduleExists('plan')) {
    $panes['active_plans'] = [
      'view' => 'farm_plan',
      'view_display_id' => 'block_active',
      'group' => 'plans',
      'weight' => 0,
    ];
  }

  // Add upcoming and late logs panes.
  $panes['upcoming_tasks'] = [
    'view' => 'farm_log',
    'view_display_id' => 'block_upcoming',
    'group' => 'logs',
    'weight' => 10,
  ];
  $panes['late_tasks'] = [
    'view' => 'farm_log',
    'view_display_id' => 'block_late',
    'group' => 'logs',
    'weight' => 11,
  ];

  return $panes;
}

/**
 * Implements hook_views_pre_view().
 */
function farm_ui_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // We only want to alter the Views we provide.
  if (!in_array($view->id(), ['farm_asset', 'farm_log', 'farm_plan', 'farm_quantity'])) {
    return;
  }

  // If this is the "By type" display and a type is specified, remove the type
  // field and filter handlers.
  if ($display_id == 'page_type' && !empty($args[0])) {
    $view->removeHandler($display_id, 'field', 'type');
    $view->removeHandler($display_id, 'filter', 'type');
  }

  // If this is the "Upcoming" or "Late" Logs block display, add a "more" link
  // that points to the default page display with appropriate filters.
  if ($view->id() == 'farm_log' && in_array($display_id, ['block_upcoming', 'block_late'])) {
    $view->display_handler->setOption('use_more', TRUE);
    $view->display_handler->setOption('use_more_always', TRUE);
    $view->display_handler->setOption('link_display', 'custom_url');
    $today = date('Y-m-d', \Drupal::time()->getRequestTime());
    if ($display_id == 'block_upcoming') {
      $view->display_handler->setOption('use_more_text', t('View all upcoming logs'));
      $view->display_handler->setOption('link_url', 'logs?status[]=pending&start=' . $today);
    }
    elseif ($display_id == 'block_late') {
      $view->display_handler->setOption('use_more_text', t('View all late logs'));
      $view->display_handler->setOption('link_url', 'logs?status[]=pending&end=' . $today);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function farm_ui_views_views_pre_render(ViewExecutable $view) {

  // We only want to alter the Views we provide.
  if (!in_array($view->id(), ['farm_asset', 'farm_log', 'farm_plan', 'farm_quantity'])) {
    return;
  }

  // Get all asset bundles.
  $asset_bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($view->getBaseEntityType()->id());

  // If this is the "By type" display and a bundle argument is specified, load
  // the bundle label and set the title.
  if ($view->current_display == 'page_type' && !empty($view->args[0])) {
    $bundle = $view->args[0];
    if (!empty($asset_bundles[$bundle])) {
      $view->setTitle($asset_bundles[$bundle]['label'] . ' ' . $view->getBaseEntityType()->getPluralLabel());
    }
  }

  // Render a map attachment above views of assets.
  if ($view->id() == 'farm_asset' && in_array($view->current_display, ['page', 'page_type'])) {

    // Start array of filtered bundles.
    $filtered_bundles = $asset_bundles;

    // Start array of asset layers to add.
    $asset_layers = [
      'full' => [],
      'cluster' => [],
    ];

    // Save the translated cluster string.
    $cluster_string = ' (' . t('clusters') . ')';

    // Save the group labels.
    $layer_group = $view->getBaseEntityType()->getCollectionLabel();
    $cluster_group = $layer_group . $cluster_string;

    // Add multiple asset layers to the page of all assets.
    if ($view->current_display == 'page') {

      // Limit to filtered asset types.
      if (!empty($exposed_filters['type'])) {
        $filtered_bundles = array_intersect_key($asset_bundles, array_flip($exposed_filters['type']));
      }
    }

    // If this is the page_type display, only map this asset type.
    if ($view->current_display == 'page_type' && !empty($view->args[0])) {

      // Don't use a separate group for cluster layers.
      $cluster_group = $layer_group;

      $bundle = $view->args[0];
      $filtered_bundles = [
        $bundle => $asset_bundles[$bundle],
      ];
    }

    // Add an asset type map layer for each filtered bundle.
    foreach ($filtered_bundles as $bundle => $bundle_info) {

      // Get exposed filters.
      $exposed_filters = $view->getExposedInput();

      // Add a cluster layer for all asset types.
      $asset_layers['cluster']['cluster_' . $bundle] = [
        'group' => $cluster_group,
        'label' => $bundle_info['label'] . $cluster_string,
        'cluster' => TRUE,
        'asset_type' => $bundle,
        'filters' => $exposed_filters,
        // @todo Color each asset type cluster differently.
      ];

      // Create individual layers for land types and structure types.
      // @todo Abstract this to detect types other than land/structure?
      if (in_array($bundle, ['land', 'structure'])) {

        // Get fields for the bundle.
        $entity_manager = \Drupal::service('entity_field.manager');
        $fields = $entity_manager->getFieldStorageDefinitions('asset', $bundle);
        $type_field_name = $bundle . '_type';

        // Create a group for the asset bundle.
        $bundle_group = t('@bundle assets', ['@bundle' => $bundle_info['label']]);

        // Get valid options for the bundle_type field.
        $options = options_allowed_values($fields[$type_field_name]);
        foreach ($options as $option => $label) {

          // Add an exposed filter for the bundle_type field.
          $exposed_filters[$type_field_name . '[]'] = $option;

          // Add layer for the bundle type.
          $asset_layers['full'][$bundle . '_' . $option] = [
            'group' => $bundle_group,
            'label' => $label,
            'asset_type' => $bundle,
            'filters' => $exposed_filters,
            // @todo Color each asset type differently.
            // This was previously provided with hook_farm_area_type_info.
            'color' => 'orange',
            'zoom' => TRUE,
          ];
        }

      }
      else {
        // Add full geometry layers for the other asset types.
        $asset_layers['full']['full_' . $bundle] = [
          'group' => $layer_group,
          'label' => $bundle_info['label'],
          'asset_type' => $bundle,
          'filters' => $exposed_filters,
          // @todo Color each asset type differently.
          // This was previously provided with hook_farm_area_type_info.
          'color' => 'orange',
          'zoom' => TRUE,
        ];
      }
    }

    // Build the map render array.
    $map = [
      '#type' => 'farm_map',
      '#map_type' => 'asset_list',
    ];
    $all_layers = array_merge($asset_layers['cluster'], $asset_layers['full']);
    $map['#map_settings']['asset_type_layers'] = $all_layers;

    // Render the map.
    $view->attachment_before['asset_map'] = $map;
  }
}
