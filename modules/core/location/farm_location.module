<?php

/**
 * @file
 * Contains farm_location.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function farm_location_field_widget_farm_map_geofield_form_alter(&$element, FormStateInterface $form_state, $context) {

  // Get the entity and field name.
  $entity = $context['items']->getEntity();
  $field_name = $context['items']->getName();

  // If this is not the geometry field on asset entities, bail.
  if (!($field_name == 'intrinsic_geometry' && $entity->getEntityTypeId() == 'asset')) {
    return;
  }

  // If the asset is not fixed, hide the geometry field.
  if (!$entity->get('is_fixed')->value) {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function farm_location_entity_base_field_info(EntityTypeInterface $entity_type) {
  module_load_include('inc', 'farm_location', 'farm_location.base_fields');
  switch ($entity_type->id()) {

    // Build asset base fields.
    case 'asset':
      return farm_location_asset_base_fields();

    // Build log base fields.
    case 'log':
      return farm_location_log_base_fields();

    default:
      return [];
  }
}

/**
 * Implements hook_views_data_alter().
 */
function farm_location_views_data_alter(array &$data) {

  // Define the asset computed fields.
  $asset_computed_fields = [
    'geometry' => [
      'title' => t('Geometry'),
      'field' => [
        'id' => 'asset_geometry',
        'field_name' => 'geometry',
      ],
    ],
    'location' => [
      'title' => t('Current location'),
      'field' => [
        'id' => 'asset_location',
        'field_name' => 'location',
      ],
    ],
  ];

  // Add asset computed fields.
  if (isset($data['asset'])) {
    foreach ($asset_computed_fields as $field_id => $field_data) {
      $data['asset'][$field_id] = $field_data;
    }
  }
}

/**
 * Sets the default value for asset is_location boolean field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function farm_location_is_location_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition): array {
  $default = FALSE;

  // Load the entity bundle.
  $bundle = \Drupal::service('entity_type.manager')->getStorage('asset_type')->load($entity->bundle());

  // Use the bundle's is_location third-party setting as a default.
  $is_location = $bundle->getThirdPartySetting('farm_location', 'is_location');
  if (!empty($is_location)) {
    $default = TRUE;
  }

  return [
    ['value' => $default],
  ];
}

/**
 * Sets the default value for asset is_fixed boolean field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function farm_location_is_fixed_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition): array {
  $default = FALSE;

  // Load the entity bundle.
  $bundle = \Drupal::service('entity_type.manager')->getStorage('asset_type')->load($entity->bundle());

  // Use the bundle's is_fixed third-party setting as a default.
  $is_fixed = $bundle->getThirdPartySetting('farm_location', 'is_fixed');
  if (!empty($is_fixed)) {
    $default = TRUE;
  }

  return [
    ['value' => $default],
  ];
}

/**
 * Sets the default value for log movement boolean field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function farm_location_is_movement_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition): array {
  $default = FALSE;

  // Load the entity bundle.
  $bundle = \Drupal::service('entity_type.manager')->getStorage('log_type')->load($entity->bundle());

  // Use the bundle's is_movement third-party setting as a default.
  $is_movement = $bundle->getThirdPartySetting('farm_location', 'is_movement');
  if (!empty($is_movement)) {
    $default = TRUE;
  }

  return [
    ['value' => $default],
  ];
}
